<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		java.util.List
	" 
%>
<% 
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode) codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String keyFile = ElementParameterParser.getValue(node, "__JSON_KEY_FILE__");
	String propertyId = ElementParameterParser.getValue(node, "__PROPERTY_ID__");
	String startDate = ElementParameterParser.getValue(node, "__START_DATE__");
	String endDate = ElementParameterParser.getValue(node, "__END_DATE__");
	String dimensions = ElementParameterParser.getValue(node, "__DIMENSIONS__");
	if (dimensions == null || dimensions.trim().isEmpty()) {
		dimensions = "null";
	}
	String metrics = ElementParameterParser.getValue(node, "__METRICS__");
	String dimensionFilters = ElementParameterParser.getValue(node, "__DIMENSION_FILTERS__");
	if (dimensionFilters == null || dimensionFilters.trim().isEmpty()) {
		dimensionFilters = "null";
	}
	String metricFilters = ElementParameterParser.getValue(node, "__METRIC_FILTERS__");
	if (metricFilters == null || metricFilters.trim().isEmpty()) {
		metricFilters = "null";
	}
	String sorts = ElementParameterParser.getValue(node, "__SORTS__");
	if (sorts == null || sorts.trim().isEmpty()) {
		sorts = "null";
	}
	String timeout = ElementParameterParser.getValue(node, "__TIMEOUT_IN_SEC__");
	String fetchSize = ElementParameterParser.getValue(node, "__FETCH_SIZE__");
	String maxAttempts = ElementParameterParser.getValue(node, "__MAX_ATTEMPTS__");
	String numberFormatLocale = ElementParameterParser.getValue(node, "__NUMBERFORMAT_LOCALE__");
	if (numberFormatLocale != null && numberFormatLocale.isEmpty() == false) {
		if (numberFormatLocale.trim().startsWith("\"") == false) {
			numberFormatLocale = "\"" + numberFormatLocale + "\"";
		}
	} else {
		numberFormatLocale = "null";
	}
	boolean dieOnError = "true".equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
	String keepClient = ElementParameterParser.getValue(node, "__KEEP_CLIENT__");
	List<IMetadataColumn> listColumns = null;
	IConnection conn = null;
	IConnection connDimensions = null;
	IConnection connMetrics = null;
	boolean normalizedFlows = "true".equals(ElementParameterParser.getValue(node, "__NORMALIZED_OUTPUT__"));
	boolean denormalizeDate = "true".equals(ElementParameterParser.getValue(node, "__DENORMALIZE_DATE__"));
	if (node.getOutgoingConnections() != null && node.getOutgoingConnections().size() > 0) {
    	if (normalizedFlows) {
		    List<? extends IConnection> connsDimensions = node.getOutgoingConnections("DIMENSION_VALUES");
		    if (connsDimensions != null && connsDimensions.size() > 0) {
		    	connDimensions = connsDimensions.get(0);
		    }
		    List<? extends IConnection> connsMetrics = node.getOutgoingConnections("METRIC_VALUES");
		    if (connsMetrics != null && connsMetrics.size() > 0) {
		    	connMetrics = connsMetrics.get(0);
		    }
    	} else {
		    List<? extends IConnection> connsPlain = node.getOutgoingConnections();
		    if (connsPlain != null && connsPlain.size() > 0) {
		    	conn = connsPlain.get(0);
		        IMetadataTable metadata = conn.getMetadataTable();
		        listColumns = metadata.getListColumns();
		    }
    	}
    }
    boolean log4jEnabled = "true".equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__")) && 
   							"JOBLET".equals(node.getComponent().getComponentType().toString()) == false;
%>
    // start creating client
	de.jlo.talendcomp.google.analytics.ga4.v1.GoogleAnalyticsInput <%=cid%> = (de.jlo.talendcomp.google.analytics.ga4.v1.GoogleAnalyticsInput) de.jlo.talendcomp.google.analytics.ga4.GoogleAnalyticsBase.getFromCache(pid + "<%=cid%>" + jobName);
	if (<%=cid%> == null) {
		<%=cid%> = new de.jlo.talendcomp.google.analytics.ga4.v1.GoogleAnalyticsInput();
		<%=cid%>.setJsonCredentialFile(<%=keyFile%>);
<% if (timeout != null && timeout.trim().isEmpty() == false) { %>
		<%=cid%>.setTimeoutInSeconds(<%=timeout%>);
<% } %>
<% if (fetchSize != null && fetchSize.trim().isEmpty() == false) { %>
		<%=cid%>.setFetchSize(<%=fetchSize%>);
<% } %>
		try {
		    // initialize client with private key
			<%=cid%>.initializeAnalyticsClient();
		} catch (Exception e) {
			globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
<% if (dieOnError) { %>
			throw e;
<% } else { %>
			e.printStackTrace();
<% } %>	
		}
		globalMap.put("<%=cid%>", <%=cid%>);
	} // if (<%=cid%> == null) {
<% if ("true".equals(keepClient)) { %>
	de.jlo.talendcomp.google.analytics.ga4.GoogleAnalyticsBase.putIntoCache(pid + "<%=cid%>" + jobName, <%=cid%>);
<% } %>
    globalMap.put("<%=cid%>_ERROR_CODE", 0);
	// setup query
	<%=cid%>.setPropertyId(<%=propertyId%>);
	<%=cid%>.setStartDate(<%=startDate%>);
	// for selecting data for one day, set end date == start date
	<%=cid%>.setEndDate(<%=endDate%>);
	<%=cid%>.setDimensions(<%=dimensions%>);
	<%=cid%>.setMetrics(<%=metrics%>);
	<%=cid%>.setDimensionFilters(<%=dimensionFilters%>);
	<%=cid%>.setMetricFilters(<%=metricFilters%>);
	<%=cid%>.setSorts(<%=sorts%>);
<% if (maxAttempts != null && maxAttempts.trim().isEmpty() == false) { %>
	<%=cid%>.setMaxRetriesInCaseOfErrors(<%=maxAttempts%>);
<% } %>
	// fire query and fetch first chunk of data
	try {
	    // checks also the correctness of result columns
		<%=cid%>.executeQuery();
	} catch (Exception e) {
		globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
		globalMap.put("<%=cid%>_ERROR_CODE", <%=cid%>.getErrorCode());
<% if (dieOnError) { %>
		throw e;
<% } else { %>
		e.printStackTrace();
<% } %>	
	}
	// iterate through the data...
<% if (normalizedFlows) { %>
   <%=cid%>.setExcludeDate(<%=denormalizeDate%>);
	// deliver the output in 2 normalized flows for dimensions and metrics
	int countDimensionValues_<%=cid%> = 0;
	int countMetricValues_<%=cid%> = 0;
	while (true) {
		try {
			// next calls the necessary calls to hasNextPlainRecord()
			if (<%=cid%>.nextNormalizedRecord() == false) {
				break;
			}
	        globalMap.put("<%=cid%>_CURRENT_DATE", <%=cid%>.getCurrentDate());
		} catch (Exception e) {
          globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
          globalMap.put("<%=cid%>_ERROR_CODE", <%=cid%>.getErrorCode());
<% if (dieOnError) { %>
			throw e;
<% } else { %>
			break;
<% } %>	
	    }
<%	 if (connDimensions != null) { %> 
		de.jlo.talendcomp.google.analytics.ga4.DimensionValue dv = <%=cid%>.getCurrentDimensionValue();
		if (dv != null) {
			<%=connDimensions.getName()%> = new <%=connDimensions.getName()%>Struct();
			<%=connDimensions.getName()%>.ROW_NUM = dv.rowNum;
			<%=connDimensions.getName()%>.DIMENSION_NAME = dv.name;
			<%=connDimensions.getName()%>.DIMENSION_VALUE = dv.value;
			countDimensionValues_<%=cid%>++;
		} else {
			<%=connDimensions.getName()%> = null;
		}
<%   } %>
<%   if (connMetrics != null) { %>
		de.jlo.talendcomp.google.analytics.ga4.MetricValue mv = <%=cid%>.getCurrentMetricValue();
		if (mv != null) {
		   <%=connMetrics.getName()%> = new <%=connMetrics.getName()%>Struct();
			<%=connMetrics.getName()%>.ROW_NUM = mv.rowNum;
			<%=connMetrics.getName()%>.METRIC_NAME = mv.name;
			<%=connMetrics.getName()%>.METRIC_VALUE = mv.value;
			countMetricValues_<%=cid%>++;
		} else {
			<%=connMetrics.getName()%> = null;
		}
<%   } %>
<% } else { %>	
	int countLines_<%=cid%> = 0;
	// deliver the output as plain flow
	// with dimension and metrics as columns
	boolean warningAboutSchemaMismatchDone_<%=cid%> = false;
	while (true) {
	    try {
		    // hasNextPlainRecord() executes a new query if needed
		    if (<%=cid%>.hasNextPlainRecord() == false) {
		    	break;
		    }
	    } catch (Exception e) {
         globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
         globalMap.put("<%=cid%>_ERROR_CODE", <%=cid%>.getErrorCode());
<% if (dieOnError) { %>
			throw e;
<% } else { %>
			break;
<% } %>	
	    }
	    // next row from results
		java.util.List<String> dataset_<%=cid%> = <%=cid%>.getNextPlainRecord();
	   countLines_<%=cid%>++;
<%  if (conn != null) { %>
		// create a new row, thats avoid the need of setting attributes to null
		<%=conn.getName()%> = new <%=conn.getName()%>Struct();
<%  } %>
<%	int index = 0;
     if (listColumns != null && conn != null) {
        for (IMetadataColumn col : listColumns) {
           String javaClassName = JavaTypesManager.getJavaTypeFromId(col.getTalendType()).getNullableClass().getName(); %>
		// fill schema field <%=col.getLabel()%>
		if (dataset_<%=cid%>.size() > <%=index%>) {
			String <%=cid%>_value_<%=index%> = dataset_<%=cid%>.get(<%=index%>);
			if (<%=cid%>_value_<%=index%> != null) {
<%              if ("java.lang.String".equals(javaClassName)) { %>
				<%=conn.getName()%>.<%=col.getLabel()%> = <%=cid%>_value_<%=index%>;
<%              } else { %>
    	        try {
					<%=conn.getName()%>.<%=col.getLabel()%> = (<%=javaClassName%>) de.jlo.talendcomp.google.analytics.ga4.Util.convertToDatatype(
							<%=cid%>_value_<%=index%>, 
							"<%=col.getTalendType().substring(3)%>", 
							<%=((col.getPattern() != null && col.getPattern().isEmpty() == false) ? col.getPattern() : numberFormatLocale)%>);
				} catch (Exception e) {
					throw new Exception("Convert field: <%=conn.getName()%>.<%=col.getLabel()%> value=[" + <%=cid%>_value_<%=index%> + "] countLines=" + countLines_<%=cid%> + " failed:" + e.getMessage(), e);		
				}
<%              } %>                
			}
		} else if (warningAboutSchemaMismatchDone_<%=cid%> == false) {
			warningAboutSchemaMismatchDone_<%=cid%> = true;
			System.err.println("Warning, the schema contains more columns than the ga result provides (current index=<%=index%>). Please check this!");
		}
<%      index++; %>
<%      } %>
<%  } %>
<%  } // if (normalizedFlows...   %>
